// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package alim_siege.recup_data_agence_0_3;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: RECUP_DATA_AGENCE Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.0.r117820
 * @status 
 */
public class RECUP_DATA_AGENCE implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (app_db_bdd != null) {

				this.setProperty("app_db_bdd", app_db_bdd.toString());

			}

			if (app_db_host != null) {

				this.setProperty("app_db_host", app_db_host.toString());

			}

			if (app_db_login != null) {

				this.setProperty("app_db_login", app_db_login.toString());

			}

			if (app_db_port != null) {

				this.setProperty("app_db_port", app_db_port.toString());

			}

			if (app_db_pwd != null) {

				this.setProperty("app_db_pwd", app_db_pwd.toString());

			}

			if (app_db_schema != null) {

				this.setProperty("app_db_schema", app_db_schema.toString());

			}

			if (DB_port != null) {

				this.setProperty("DB_port", DB_port.toString());

			}

			if (DB_name != null) {

				this.setProperty("DB_name", DB_name.toString());

			}

			if (DB_user != null) {

				this.setProperty("DB_user", DB_user.toString());

			}

			if (DB_pass != null) {

				this.setProperty("DB_pass", DB_pass.toString());

			}

			if (DB_host != null) {

				this.setProperty("DB_host", DB_host.toString());

			}

			if (DB_schema != null) {

				this.setProperty("DB_schema", DB_schema.toString());

			}

			if (max_audit_id != null) {

				this.setProperty("max_audit_id", max_audit_id.toString());

			}

			if (id_agence != null) {

				this.setProperty("id_agence", id_agence.toString());

			}

			if (desc_agence != null) {

				this.setProperty("desc_agence", desc_agence.toString());

			}

			if (id_log_parent != null) {

				this.setProperty("id_log_parent", id_log_parent.toString());

			}

		}

		public String app_db_bdd;

		public String getApp_db_bdd() {
			return this.app_db_bdd;
		}

		public String app_db_host;

		public String getApp_db_host() {
			return this.app_db_host;
		}

		public String app_db_login;

		public String getApp_db_login() {
			return this.app_db_login;
		}

		public String app_db_port;

		public String getApp_db_port() {
			return this.app_db_port;
		}

		public String app_db_pwd;

		public String getApp_db_pwd() {
			return this.app_db_pwd;
		}

		public String app_db_schema;

		public String getApp_db_schema() {
			return this.app_db_schema;
		}

		public Integer DB_port;

		public Integer getDB_port() {
			return this.DB_port;
		}

		public String DB_name;

		public String getDB_name() {
			return this.DB_name;
		}

		public String DB_user;

		public String getDB_user() {
			return this.DB_user;
		}

		public String DB_pass;

		public String getDB_pass() {
			return this.DB_pass;
		}

		public String DB_host;

		public String getDB_host() {
			return this.DB_host;
		}

		public String DB_schema;

		public String getDB_schema() {
			return this.DB_schema;
		}

		public Integer max_audit_id;

		public Integer getMax_audit_id() {
			return this.max_audit_id;
		}

		public Integer id_agence;

		public Integer getId_agence() {
			return this.id_agence;
		}

		public String desc_agence;

		public String getDesc_agence() {
			return this.desc_agence;
		}

		public Integer id_log_parent;

		public Integer getId_log_parent() {
			return this.id_log_parent;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.3";
	private final String jobName = "RECUP_DATA_AGENCE";
	private final String projectName = "ALIM_SIEGE";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					RECUP_DATA_AGENCE.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(RECUP_DATA_AGENCE.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tPostgresqlConnection_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlConnection_2_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlConnection_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		tPostgresqlConnection_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tPostgresqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJoin_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlRow_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tWarn_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tWarn_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlInput_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlOutput_3_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlCommit_4_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlCommit_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHash_row1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostgresqlInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostgresqlConnection_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_1_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "ERROR", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

		try {

			errorCode = null;
			tWarn_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}
	}

	public void tPostgresqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_3_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlRow_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_2_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tWarn_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlInput_2_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlCommit_4_onSubJobError(
			java.lang.Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostgresqlConnection_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_2", false);
				start_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_2";

				int tos_count_tPostgresqlConnection_2 = 0;

				String url_tPostgresqlConnection_2 = "jdbc:postgresql://"
						+ context.DB_host + ":" + context.DB_port + "/"
						+ context.DB_name;

				String userName_tPostgresqlConnection_2 = context.DB_user;

				final String decryptedPassword_tPostgresqlConnection_2 = context.DB_pass;
				String password_tPostgresqlConnection_2 = decryptedPassword_tPostgresqlConnection_2;

				java.sql.Connection conn_tPostgresqlConnection_2 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_2 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_2,
								userName_tPostgresqlConnection_2,
								password_tPostgresqlConnection_2);
				globalMap.put("conn_tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);
				if (null != conn_tPostgresqlConnection_2) {

					conn_tPostgresqlConnection_2.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_2", "public");

				globalMap.put("conn_" + "tPostgresqlConnection_2",
						conn_tPostgresqlConnection_2);

				/**
				 * [tPostgresqlConnection_2 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_2 main ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				tos_count_tPostgresqlConnection_2++;

				/**
				 * [tPostgresqlConnection_2 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_2 end ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				ok_Hash.put("tPostgresqlConnection_2", true);
				end_Hash.put("tPostgresqlConnection_2",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_2 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_2:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlConnection_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_2 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_2";

				/**
				 * [tPostgresqlConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlConnection_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlConnection_1", false);
				start_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlConnection_1";

				int tos_count_tPostgresqlConnection_1 = 0;

				String url_tPostgresqlConnection_1 = "jdbc:postgresql://"
						+ context.app_db_host + ":" + context.app_db_port + "/"
						+ context.app_db_bdd;

				String userName_tPostgresqlConnection_1 = context.app_db_login;

				final String decryptedPassword_tPostgresqlConnection_1 = context.app_db_pwd;
				String password_tPostgresqlConnection_1 = decryptedPassword_tPostgresqlConnection_1;

				java.sql.Connection conn_tPostgresqlConnection_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				conn_tPostgresqlConnection_1 = java.sql.DriverManager
						.getConnection(url_tPostgresqlConnection_1,
								userName_tPostgresqlConnection_1,
								password_tPostgresqlConnection_1);
				globalMap.put("conn_tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);
				if (null != conn_tPostgresqlConnection_1) {

					conn_tPostgresqlConnection_1.setAutoCommit(false);
				}

				globalMap.put("schema_" + "tPostgresqlConnection_1",
						context.app_db_schema);

				globalMap.put("conn_" + "tPostgresqlConnection_1",
						conn_tPostgresqlConnection_1);

				/**
				 * [tPostgresqlConnection_1 begin ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 main ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				tos_count_tPostgresqlConnection_1++;

				/**
				 * [tPostgresqlConnection_1 main ] stop
				 */
				/**
				 * [tPostgresqlConnection_1 end ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				ok_Hash.put("tPostgresqlConnection_1", true);
				end_Hash.put("tPostgresqlConnection_1",
						System.currentTimeMillis());

				/**
				 * [tPostgresqlConnection_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlConnection_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tPostgresqlInput_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlConnection_1 finally ] start
				 */

				currentComponent = "tPostgresqlConnection_1";

				/**
				 * [tPostgresqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class out1Struct implements
			routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public int id_audit_agc;

		public int getId_audit_agc() {
			return this.id_audit_agc;
		}

		public java.util.Date date_crea;

		public java.util.Date getDate_crea() {
			return this.date_crea;
		}

		public java.util.Date date_maj;

		public java.util.Date getDate_maj() {
			return this.date_maj;
		}

		public int id_ag_local;

		public int getId_ag_local() {
			return this.id_ag_local;
		}

		public int id_ag_distant;

		public int getId_ag_distant() {
			return this.id_ag_distant;
		}

		public String nom_login;

		public String getNom_login() {
			return this.nom_login;
		}

		public String type_transaction;

		public String getType_transaction() {
			return this.type_transaction;
		}

		public String type_choix_libel;

		public String getType_choix_libel() {
			return this.type_choix_libel;
		}

		public Double montant;

		public Double getMontant() {
			return this.montant;
		}

		public String code_devise_montant;

		public String getCode_devise_montant() {
			return this.code_devise_montant;
		}

		public Double commission;

		public Double getCommission() {
			return this.commission;
		}

		public String code_devise_commission;

		public String getCode_devise_commission() {
			return this.code_devise_commission;
		}

		public String compte_liaison_local;

		public String getCompte_liaison_local() {
			return this.compte_liaison_local;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.id_audit_agc = dis.readInt();

					this.date_crea = readDate(dis);

					this.date_maj = readDate(dis);

					this.id_ag_local = dis.readInt();

					this.id_ag_distant = dis.readInt();

					this.nom_login = readString(dis);

					this.type_transaction = readString(dis);

					this.type_choix_libel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant = null;
					} else {
						this.montant = dis.readDouble();
					}

					this.code_devise_montant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.commission = null;
					} else {
						this.commission = dis.readDouble();
					}

					this.code_devise_commission = readString(dis);

					this.compte_liaison_local = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_audit_agc);

				// java.util.Date

				writeDate(this.date_crea, dos);

				// java.util.Date

				writeDate(this.date_maj, dos);

				// int

				dos.writeInt(this.id_ag_local);

				// int

				dos.writeInt(this.id_ag_distant);

				// String

				writeString(this.nom_login, dos);

				// String

				writeString(this.type_transaction, dos);

				// String

				writeString(this.type_choix_libel, dos);

				// Double

				if (this.montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant);
				}

				// String

				writeString(this.code_devise_montant, dos);

				// Double

				if (this.commission == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.commission);
				}

				// String

				writeString(this.code_devise_commission, dos);

				// String

				writeString(this.compte_liaison_local, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_audit_agc=" + String.valueOf(id_audit_agc));
			sb.append(",date_crea=" + String.valueOf(date_crea));
			sb.append(",date_maj=" + String.valueOf(date_maj));
			sb.append(",id_ag_local=" + String.valueOf(id_ag_local));
			sb.append(",id_ag_distant=" + String.valueOf(id_ag_distant));
			sb.append(",nom_login=" + nom_login);
			sb.append(",type_transaction=" + type_transaction);
			sb.append(",type_choix_libel=" + type_choix_libel);
			sb.append(",montant=" + String.valueOf(montant));
			sb.append(",code_devise_montant=" + code_devise_montant);
			sb.append(",commission=" + String.valueOf(commission));
			sb.append(",code_devise_commission=" + code_devise_commission);
			sb.append(",compte_liaison_local=" + compte_liaison_local);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public int id_audit;

		public int getId_audit() {
			return this.id_audit;
		}

		public java.util.Date date_crea;

		public java.util.Date getDate_crea() {
			return this.date_crea;
		}

		public java.util.Date date_maj;

		public java.util.Date getDate_maj() {
			return this.date_maj;
		}

		public int id_ag_local;

		public int getId_ag_local() {
			return this.id_ag_local;
		}

		public int id_ag_distant;

		public int getId_ag_distant() {
			return this.id_ag_distant;
		}

		public String nom_login;

		public String getNom_login() {
			return this.nom_login;
		}

		public String type_transaction;

		public String getType_transaction() {
			return this.type_transaction;
		}

		public String type_choix_libel;

		public String getType_choix_libel() {
			return this.type_choix_libel;
		}

		public Double montant;

		public Double getMontant() {
			return this.montant;
		}

		public String code_devise_montant;

		public String getCode_devise_montant() {
			return this.code_devise_montant;
		}

		public Double commission;

		public Double getCommission() {
			return this.commission;
		}

		public String code_devise_commission;

		public String getCode_devise_commission() {
			return this.code_devise_commission;
		}

		public String compte_liaison;

		public String getCompte_liaison() {
			return this.compte_liaison;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.id_audit = dis.readInt();

					this.date_crea = readDate(dis);

					this.date_maj = readDate(dis);

					this.id_ag_local = dis.readInt();

					this.id_ag_distant = dis.readInt();

					this.nom_login = readString(dis);

					this.type_transaction = readString(dis);

					this.type_choix_libel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant = null;
					} else {
						this.montant = dis.readDouble();
					}

					this.code_devise_montant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.commission = null;
					} else {
						this.commission = dis.readDouble();
					}

					this.code_devise_commission = readString(dis);

					this.compte_liaison = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_audit);

				// java.util.Date

				writeDate(this.date_crea, dos);

				// java.util.Date

				writeDate(this.date_maj, dos);

				// int

				dos.writeInt(this.id_ag_local);

				// int

				dos.writeInt(this.id_ag_distant);

				// String

				writeString(this.nom_login, dos);

				// String

				writeString(this.type_transaction, dos);

				// String

				writeString(this.type_choix_libel, dos);

				// Double

				if (this.montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant);
				}

				// String

				writeString(this.code_devise_montant, dos);

				// Double

				if (this.commission == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.commission);
				}

				// String

				writeString(this.code_devise_commission, dos);

				// String

				writeString(this.compte_liaison, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_audit=" + String.valueOf(id_audit));
			sb.append(",date_crea=" + String.valueOf(date_crea));
			sb.append(",date_maj=" + String.valueOf(date_maj));
			sb.append(",id_ag_local=" + String.valueOf(id_ag_local));
			sb.append(",id_ag_distant=" + String.valueOf(id_ag_distant));
			sb.append(",nom_login=" + nom_login);
			sb.append(",type_transaction=" + type_transaction);
			sb.append(",type_choix_libel=" + type_choix_libel);
			sb.append(",montant=" + String.valueOf(montant));
			sb.append(",code_devise_montant=" + code_devise_montant);
			sb.append(",commission=" + String.valueOf(commission));
			sb.append(",code_devise_commission=" + code_devise_commission);
			sb.append(",compte_liaison=" + compte_liaison);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public int id_audit;

		public int getId_audit() {
			return this.id_audit;
		}

		public java.util.Date date_crea;

		public java.util.Date getDate_crea() {
			return this.date_crea;
		}

		public java.util.Date date_maj;

		public java.util.Date getDate_maj() {
			return this.date_maj;
		}

		public int id_ag_local;

		public int getId_ag_local() {
			return this.id_ag_local;
		}

		public int id_ag_distant;

		public int getId_ag_distant() {
			return this.id_ag_distant;
		}

		public String nom_login;

		public String getNom_login() {
			return this.nom_login;
		}

		public String type_transaction;

		public String getType_transaction() {
			return this.type_transaction;
		}

		public String type_choix_libel;

		public String getType_choix_libel() {
			return this.type_choix_libel;
		}

		public Double montant;

		public Double getMontant() {
			return this.montant;
		}

		public String code_devise_montant;

		public String getCode_devise_montant() {
			return this.code_devise_montant;
		}

		public Double commission;

		public Double getCommission() {
			return this.commission;
		}

		public String code_devise_commission;

		public String getCode_devise_commission() {
			return this.code_devise_commission;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.id_audit = dis.readInt();

					this.date_crea = readDate(dis);

					this.date_maj = readDate(dis);

					this.id_ag_local = dis.readInt();

					this.id_ag_distant = dis.readInt();

					this.nom_login = readString(dis);

					this.type_transaction = readString(dis);

					this.type_choix_libel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant = null;
					} else {
						this.montant = dis.readDouble();
					}

					this.code_devise_montant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.commission = null;
					} else {
						this.commission = dis.readDouble();
					}

					this.code_devise_commission = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_audit);

				// java.util.Date

				writeDate(this.date_crea, dos);

				// java.util.Date

				writeDate(this.date_maj, dos);

				// int

				dos.writeInt(this.id_ag_local);

				// int

				dos.writeInt(this.id_ag_distant);

				// String

				writeString(this.nom_login, dos);

				// String

				writeString(this.type_transaction, dos);

				// String

				writeString(this.type_choix_libel, dos);

				// Double

				if (this.montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant);
				}

				// String

				writeString(this.code_devise_montant, dos);

				// Double

				if (this.commission == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.commission);
				}

				// String

				writeString(this.code_devise_commission, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_audit=" + String.valueOf(id_audit));
			sb.append(",date_crea=" + String.valueOf(date_crea));
			sb.append(",date_maj=" + String.valueOf(date_maj));
			sb.append(",id_ag_local=" + String.valueOf(id_ag_local));
			sb.append(",id_ag_distant=" + String.valueOf(id_ag_distant));
			sb.append(",nom_login=" + nom_login);
			sb.append(",type_transaction=" + type_transaction);
			sb.append(",type_choix_libel=" + type_choix_libel);
			sb.append(",montant=" + String.valueOf(montant));
			sb.append(",code_devise_montant=" + code_devise_montant);
			sb.append(",commission=" + String.valueOf(commission));
			sb.append(",code_devise_commission=" + code_devise_commission);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tPostgresqlInput_1Struct implements
			routines.system.IPersistableRow<after_tPostgresqlInput_1Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public int id_audit;

		public int getId_audit() {
			return this.id_audit;
		}

		public java.util.Date date_crea;

		public java.util.Date getDate_crea() {
			return this.date_crea;
		}

		public java.util.Date date_maj;

		public java.util.Date getDate_maj() {
			return this.date_maj;
		}

		public int id_ag_local;

		public int getId_ag_local() {
			return this.id_ag_local;
		}

		public int id_ag_distant;

		public int getId_ag_distant() {
			return this.id_ag_distant;
		}

		public String nom_login;

		public String getNom_login() {
			return this.nom_login;
		}

		public String type_transaction;

		public String getType_transaction() {
			return this.type_transaction;
		}

		public String type_choix_libel;

		public String getType_choix_libel() {
			return this.type_choix_libel;
		}

		public Double montant;

		public Double getMontant() {
			return this.montant;
		}

		public String code_devise_montant;

		public String getCode_devise_montant() {
			return this.code_devise_montant;
		}

		public Double commission;

		public Double getCommission() {
			return this.commission;
		}

		public String code_devise_commission;

		public String getCode_devise_commission() {
			return this.code_devise_commission;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.id_audit = dis.readInt();

					this.date_crea = readDate(dis);

					this.date_maj = readDate(dis);

					this.id_ag_local = dis.readInt();

					this.id_ag_distant = dis.readInt();

					this.nom_login = readString(dis);

					this.type_transaction = readString(dis);

					this.type_choix_libel = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.montant = null;
					} else {
						this.montant = dis.readDouble();
					}

					this.code_devise_montant = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.commission = null;
					} else {
						this.commission = dis.readDouble();
					}

					this.code_devise_commission = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_audit);

				// java.util.Date

				writeDate(this.date_crea, dos);

				// java.util.Date

				writeDate(this.date_maj, dos);

				// int

				dos.writeInt(this.id_ag_local);

				// int

				dos.writeInt(this.id_ag_distant);

				// String

				writeString(this.nom_login, dos);

				// String

				writeString(this.type_transaction, dos);

				// String

				writeString(this.type_choix_libel, dos);

				// Double

				if (this.montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.montant);
				}

				// String

				writeString(this.code_devise_montant, dos);

				// Double

				if (this.commission == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.commission);
				}

				// String

				writeString(this.code_devise_commission, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_audit=" + String.valueOf(id_audit));
			sb.append(",date_crea=" + String.valueOf(date_crea));
			sb.append(",date_maj=" + String.valueOf(date_maj));
			sb.append(",id_ag_local=" + String.valueOf(id_ag_local));
			sb.append(",id_ag_distant=" + String.valueOf(id_ag_distant));
			sb.append(",nom_login=" + nom_login);
			sb.append(",type_transaction=" + type_transaction);
			sb.append(",type_choix_libel=" + type_choix_libel);
			sb.append(",montant=" + String.valueOf(montant));
			sb.append(",code_devise_montant=" + code_devise_montant);
			sb.append(",commission=" + String.valueOf(commission));
			sb.append(",code_devise_commission=" + code_devise_commission);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tPostgresqlInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				tPostgresqlInput_2Process(globalMap);

				row2Struct row2 = new row2Struct();
				row3Struct row3 = new row3Struct();
				out1Struct out1 = new out1Struct();

				/**
				 * [tPostgresqlOutput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_1", false);
				start_Hash.put("tPostgresqlOutput_1",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_1";

				int tos_count_tPostgresqlOutput_1 = 0;

				String dbschema_tPostgresqlOutput_1 = null;
				dbschema_tPostgresqlOutput_1 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_2");

				String tableName_tPostgresqlOutput_1 = null;
				if (dbschema_tPostgresqlOutput_1 == null
						|| dbschema_tPostgresqlOutput_1.trim().length() == 0) {
					tableName_tPostgresqlOutput_1 = "ad_multi_agence_compensation";
				} else {
					tableName_tPostgresqlOutput_1 = dbschema_tPostgresqlOutput_1
							+ "\".\"" + "ad_multi_agence_compensation";
				}

				int nb_line_tPostgresqlOutput_1 = 0;
				int nb_line_update_tPostgresqlOutput_1 = 0;
				int nb_line_inserted_tPostgresqlOutput_1 = 0;
				int nb_line_deleted_tPostgresqlOutput_1 = 0;
				int nb_line_rejected_tPostgresqlOutput_1 = 0;

				int deletedCount_tPostgresqlOutput_1 = 0;
				int updatedCount_tPostgresqlOutput_1 = 0;
				int insertedCount_tPostgresqlOutput_1 = 0;
				int rejectedCount_tPostgresqlOutput_1 = 0;

				boolean whetherReject_tPostgresqlOutput_1 = false;

				java.sql.Connection conn_tPostgresqlOutput_1 = null;

				conn_tPostgresqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				int batchSize_tPostgresqlOutput_1 = 10000;
				int batchSizeCounter_tPostgresqlOutput_1 = 0;

				int count_tPostgresqlOutput_1 = 0;
				String insert_tPostgresqlOutput_1 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_1
						+ "\" (\"id_audit_agc\",\"date_crea\",\"date_maj\",\"id_ag_local\",\"id_ag_distant\",\"nom_login\",\"type_transaction\",\"type_choix_libel\",\"montant\",\"code_devise_montant\",\"commission\",\"code_devise_commission\",\"compte_liaison_local\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_1 = conn_tPostgresqlOutput_1
						.prepareStatement(insert_tPostgresqlOutput_1);

				/**
				 * [tPostgresqlOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tJoin_2 begin ] start
				 */

				ok_Hash.put("tJoin_2", false);
				start_Hash.put("tJoin_2", System.currentTimeMillis());

				currentComponent = "tJoin_2";

				int tos_count_tJoin_2 = 0;

				final java.util.Map<row1Struct, row1Struct> tHash_tJoin_2 = (java.util.Map<row1Struct, row1Struct>) globalMap
						.get("tHash_row1");

				class Util_tJoin_2 {
					row1Struct lookupValue = null;
					row1Struct row1HashKey = new row1Struct();

					public boolean isJoined(row2Struct mainRow) {
						row1HashKey.id_agc = mainRow.id_ag_local;

						row1HashKey.hashCodeDirty = true;
						lookupValue = tHash_tJoin_2.get(row1HashKey);
						if (lookupValue != null) {

							return true;
						} else {

						}
						return false;
					}
				}

				Util_tJoin_2 util_tJoin_2 = new Util_tJoin_2();

				int nb_line_tJoin_2 = 0;

				/**
				 * [tJoin_2 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_1", false);
				start_Hash
						.put("tPostgresqlInput_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_1";

				int tos_count_tPostgresqlInput_1 = 0;

				int nb_line_tPostgresqlInput_1 = 0;
				java.sql.Connection conn_tPostgresqlInput_1 = null;
				conn_tPostgresqlInput_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");

				java.sql.Statement stmt_tPostgresqlInput_1 = conn_tPostgresqlInput_1
						.createStatement();

				String dbquery_tPostgresqlInput_1 = "select id_audit, date_crea, date_maj, id_ag_local, id_ag_distant, nom_login,\r\ntype_transaction, type_choix_libel, a.montant,\r\na.code_devise_montant,\r\na.commission,\r\na.code_devise_commission\r\nfrom adsys_audit_multi_agence a\r\nwhere id_audit > "
						+ context.max_audit_id
						+ "\r\nand id_ag_local = "
						+ context.id_agence
						+ "\r\nand success_flag = 'true'\r\norder by id_audit asc";

				globalMap.put("tPostgresqlInput_1_QUERY",
						dbquery_tPostgresqlInput_1);
				java.sql.ResultSet rs_tPostgresqlInput_1 = null;
				try {
					rs_tPostgresqlInput_1 = stmt_tPostgresqlInput_1
							.executeQuery(dbquery_tPostgresqlInput_1);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_1 = rs_tPostgresqlInput_1
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_1 = rsmd_tPostgresqlInput_1
							.getColumnCount();

					String tmpContent_tPostgresqlInput_1 = null;

					while (rs_tPostgresqlInput_1.next()) {
						nb_line_tPostgresqlInput_1++;

						if (colQtyInRs_tPostgresqlInput_1 < 1) {
							row2.id_audit = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(1) != null) {
								row2.id_audit = rs_tPostgresqlInput_1.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 2) {
							row2.date_crea = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(2) != null) {
								row2.date_crea = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(2)
												.getTime());
							} else {
								row2.date_crea = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 3) {
							row2.date_maj = null;
						} else {

							if (rs_tPostgresqlInput_1.getTimestamp(3) != null) {
								row2.date_maj = new java.util.Date(
										rs_tPostgresqlInput_1.getTimestamp(3)
												.getTime());
							} else {
								row2.date_maj = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 4) {
							row2.id_ag_local = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(4) != null) {
								row2.id_ag_local = rs_tPostgresqlInput_1
										.getInt(4);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 5) {
							row2.id_ag_distant = 0;
						} else {

							if (rs_tPostgresqlInput_1.getObject(5) != null) {
								row2.id_ag_distant = rs_tPostgresqlInput_1
										.getInt(5);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 6) {
							row2.nom_login = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(6);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.nom_login = tmpContent_tPostgresqlInput_1;
							} else {
								row2.nom_login = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 7) {
							row2.type_transaction = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(7);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.type_transaction = tmpContent_tPostgresqlInput_1;
							} else {
								row2.type_transaction = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 8) {
							row2.type_choix_libel = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(8);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.type_choix_libel = tmpContent_tPostgresqlInput_1;
							} else {
								row2.type_choix_libel = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 9) {
							row2.montant = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(9) != null) {
								row2.montant = rs_tPostgresqlInput_1
										.getDouble(9);
							} else {
								row2.montant = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 10) {
							row2.code_devise_montant = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(10);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.code_devise_montant = tmpContent_tPostgresqlInput_1;
							} else {
								row2.code_devise_montant = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 11) {
							row2.commission = null;
						} else {

							if (rs_tPostgresqlInput_1.getObject(11) != null) {
								row2.commission = rs_tPostgresqlInput_1
										.getDouble(11);
							} else {
								row2.commission = null;
							}
						}

						if (colQtyInRs_tPostgresqlInput_1 < 12) {
							row2.code_devise_commission = null;
						} else {

							tmpContent_tPostgresqlInput_1 = rs_tPostgresqlInput_1
									.getString(12);
							if (tmpContent_tPostgresqlInput_1 != null) {
								row2.code_devise_commission = tmpContent_tPostgresqlInput_1;
							} else {
								row2.code_devise_commission = null;
							}
						}

						/**
						 * [tPostgresqlInput_1 begin ] stop
						 */
						/**
						 * [tPostgresqlInput_1 main ] start
						 */

						currentComponent = "tPostgresqlInput_1";

						tos_count_tPostgresqlInput_1++;

						/**
						 * [tPostgresqlInput_1 main ] stop
						 */

						/**
						 * [tJoin_2 main ] start
						 */

						currentComponent = "tJoin_2";

						row3 = null;

						row3 = new row3Struct();
						row3.id_audit = row2.id_audit;
						row3.date_crea = row2.date_crea;
						row3.date_maj = row2.date_maj;
						row3.id_ag_local = row2.id_ag_local;
						row3.id_ag_distant = row2.id_ag_distant;
						row3.nom_login = row2.nom_login;
						row3.type_transaction = row2.type_transaction;
						row3.type_choix_libel = row2.type_choix_libel;
						row3.montant = row2.montant;
						row3.code_devise_montant = row2.code_devise_montant;
						row3.commission = row2.commission;
						row3.code_devise_commission = row2.code_devise_commission;

						if (util_tJoin_2.isJoined(row2)) {
							row3.compte_liaison = util_tJoin_2.lookupValue.compte_liaison;
						}

						// /////////////////////

						tos_count_tJoin_2++;

						/**
						 * [tJoin_2 main ] stop
						 */
						// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_1 main ] start
							 */

							currentComponent = "tMap_1";

							boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_1 = false;
							boolean mainRowRejected_tMap_1 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
								// ###############################
								// # Output tables

								out1 = null;

								// # Output table : 'out1'
								out1_tmp.id_audit_agc = row3.id_audit;
								out1_tmp.date_crea = row3.date_crea;
								out1_tmp.date_maj = row3.date_maj;
								out1_tmp.id_ag_local = row3.id_ag_local;
								out1_tmp.id_ag_distant = row3.id_ag_distant;
								out1_tmp.nom_login = row3.nom_login;
								out1_tmp.type_transaction = row3.type_transaction;
								out1_tmp.type_choix_libel = row3.type_choix_libel;
								out1_tmp.montant = row3.montant;
								out1_tmp.code_devise_montant = row3.code_devise_montant;
								out1_tmp.commission = row3.commission;
								out1_tmp.code_devise_commission = row3.code_devise_commission;
								out1_tmp.compte_liaison_local = row3.compte_liaison;
								out1 = out1_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_1 = false;

							tos_count_tMap_1++;

							/**
							 * [tMap_1 main ] stop
							 */
							// Start of branch "out1"
							if (out1 != null) {

								/**
								 * [tPostgresqlOutput_1 main ] start
								 */

								currentComponent = "tPostgresqlOutput_1";

								whetherReject_tPostgresqlOutput_1 = false;
								pstmt_tPostgresqlOutput_1.setInt(1,
										out1.id_audit_agc);

								if (out1.date_crea != null) {
									pstmt_tPostgresqlOutput_1.setTimestamp(2,
											new java.sql.Timestamp(
													out1.date_crea.getTime()));
								} else {
									pstmt_tPostgresqlOutput_1.setNull(2,
											java.sql.Types.TIMESTAMP);
								}

								if (out1.date_maj != null) {
									pstmt_tPostgresqlOutput_1.setTimestamp(3,
											new java.sql.Timestamp(
													out1.date_maj.getTime()));
								} else {
									pstmt_tPostgresqlOutput_1.setNull(3,
											java.sql.Types.TIMESTAMP);
								}

								pstmt_tPostgresqlOutput_1.setInt(4,
										out1.id_ag_local);

								pstmt_tPostgresqlOutput_1.setInt(5,
										out1.id_ag_distant);

								if (out1.nom_login == null) {
									pstmt_tPostgresqlOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(6,
											out1.nom_login);
								}

								if (out1.type_transaction == null) {
									pstmt_tPostgresqlOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(7,
											out1.type_transaction);
								}

								if (out1.type_choix_libel == null) {
									pstmt_tPostgresqlOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(8,
											out1.type_choix_libel);
								}

								if (out1.montant == null) {
									pstmt_tPostgresqlOutput_1.setNull(9,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tPostgresqlOutput_1.setDouble(9,
											out1.montant);
								}

								if (out1.code_devise_montant == null) {
									pstmt_tPostgresqlOutput_1.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(10,
											out1.code_devise_montant);
								}

								if (out1.commission == null) {
									pstmt_tPostgresqlOutput_1.setNull(11,
											java.sql.Types.DOUBLE);
								} else {
									pstmt_tPostgresqlOutput_1.setDouble(11,
											out1.commission);
								}

								if (out1.code_devise_commission == null) {
									pstmt_tPostgresqlOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(12,
											out1.code_devise_commission);
								}

								if (out1.compte_liaison_local == null) {
									pstmt_tPostgresqlOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tPostgresqlOutput_1.setString(13,
											out1.compte_liaison_local);
								}

								pstmt_tPostgresqlOutput_1.addBatch();
								nb_line_tPostgresqlOutput_1++;

								batchSizeCounter_tPostgresqlOutput_1++;

								if (batchSize_tPostgresqlOutput_1 <= batchSizeCounter_tPostgresqlOutput_1) {
									try {
										int countSum_tPostgresqlOutput_1 = 0;
										for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
												.executeBatch()) {
											countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
													: countEach_tPostgresqlOutput_1);
										}

										insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

										batchSizeCounter_tPostgresqlOutput_1 = 0;
									} catch (java.sql.BatchUpdateException e) {

										throw (e);

									}

								}

								tos_count_tPostgresqlOutput_1++;

								/**
								 * [tPostgresqlOutput_1 main ] stop
								 */

							} // End of branch "out1"

						} // End of branch "row3"

						/**
						 * [tPostgresqlInput_1 end ] start
						 */

						currentComponent = "tPostgresqlInput_1";

					}
				} finally {
					stmt_tPostgresqlInput_1.close();

				}
				globalMap.put("tPostgresqlInput_1_NB_LINE",
						nb_line_tPostgresqlInput_1);

				ok_Hash.put("tPostgresqlInput_1", true);
				end_Hash.put("tPostgresqlInput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_1 end ] stop
				 */

				/**
				 * [tJoin_2 end ] start
				 */

				currentComponent = "tJoin_2";

				ok_Hash.put("tJoin_2", true);
				end_Hash.put("tJoin_2", System.currentTimeMillis());

				/**
				 * [tJoin_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 end ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				try {
					int countSum_tPostgresqlOutput_1 = 0;
					if (pstmt_tPostgresqlOutput_1 != null) {
						for (int countEach_tPostgresqlOutput_1 : pstmt_tPostgresqlOutput_1
								.executeBatch()) {
							countSum_tPostgresqlOutput_1 += (countEach_tPostgresqlOutput_1 < 0 ? 0
									: countEach_tPostgresqlOutput_1);
						}
					}

					insertedCount_tPostgresqlOutput_1 += countSum_tPostgresqlOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					throw (e);

				}

				if (pstmt_tPostgresqlOutput_1 != null) {

					pstmt_tPostgresqlOutput_1.close();

				}

				nb_line_deleted_tPostgresqlOutput_1 = nb_line_deleted_tPostgresqlOutput_1
						+ deletedCount_tPostgresqlOutput_1;
				nb_line_update_tPostgresqlOutput_1 = nb_line_update_tPostgresqlOutput_1
						+ updatedCount_tPostgresqlOutput_1;
				nb_line_inserted_tPostgresqlOutput_1 = nb_line_inserted_tPostgresqlOutput_1
						+ insertedCount_tPostgresqlOutput_1;
				nb_line_rejected_tPostgresqlOutput_1 = nb_line_rejected_tPostgresqlOutput_1
						+ rejectedCount_tPostgresqlOutput_1;
				globalMap.put("tPostgresqlOutput_1_NB_LINE",
						nb_line_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_1);
				globalMap.put("tPostgresqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_1);

				ok_Hash.put("tPostgresqlOutput_1", true);
				end_Hash.put("tPostgresqlOutput_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlOutput_1 end ] stop
				 */

			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlInput_1:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlCommit_3Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			// free memory for "tJoin_2"
			globalMap.remove("tHash_row1");

			try {

				/**
				 * [tPostgresqlInput_1 finally ] start
				 */

				currentComponent = "tPostgresqlInput_1";

				/**
				 * [tPostgresqlInput_1 finally ] stop
				 */

				/**
				 * [tJoin_2 finally ] start
				 */

				currentComponent = "tJoin_2";

				/**
				 * [tJoin_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_1 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_1";

				/**
				 * [tPostgresqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_3", false);
				start_Hash.put("tPostgresqlCommit_3",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlCommit_3";

				int tos_count_tPostgresqlCommit_3 = 0;

				/**
				 * [tPostgresqlCommit_3 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_3 main ] start
				 */

				currentComponent = "tPostgresqlCommit_3";

				java.sql.Connection conn_tPostgresqlCommit_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_1");
				if (conn_tPostgresqlCommit_3 != null
						&& !conn_tPostgresqlCommit_3.isClosed()) {
					conn_tPostgresqlCommit_3.commit();
				}

				tos_count_tPostgresqlCommit_3++;

				/**
				 * [tPostgresqlCommit_3 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_3 end ] start
				 */

				currentComponent = "tPostgresqlCommit_3";

				ok_Hash.put("tPostgresqlCommit_3", true);
				end_Hash.put("tPostgresqlCommit_3", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_3 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tPostgresqlCommit_3:OnSubjobOk",
						"", Thread.currentThread().getId() + "", "", "", "",
						"", "");
			}

			tPostgresqlRow_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_3 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_3";

				/**
				 * [tPostgresqlCommit_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_3_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlRow_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlRow_1 begin ] start
				 */

				ok_Hash.put("tPostgresqlRow_1", false);
				start_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				currentComponent = "tPostgresqlRow_1";

				int tos_count_tPostgresqlRow_1 = 0;

				java.sql.Connection conn_tPostgresqlRow_1 = null;
				conn_tPostgresqlRow_1 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				java.sql.Statement stmt_tPostgresqlRow_1 = conn_tPostgresqlRow_1
						.createStatement();
				String query_tPostgresqlRow_1 = "";
				boolean whetherReject_tPostgresqlRow_1 = false;

				/**
				 * [tPostgresqlRow_1 begin ] stop
				 */
				/**
				 * [tPostgresqlRow_1 main ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				query_tPostgresqlRow_1 = "update adsys_multi_agence cible\r\nset app_max_id_audit_ma = (select max(id_audit_agc) from ad_multi_agence_compensation src where cible.id_agc = src.id_ag_local)";
				whetherReject_tPostgresqlRow_1 = false;

				globalMap.put("tPostgresqlRow_1_QUERY", query_tPostgresqlRow_1);
				try {
					stmt_tPostgresqlRow_1.execute(query_tPostgresqlRow_1);

				} catch (java.lang.Exception e) {
					whetherReject_tPostgresqlRow_1 = true;
					System.err.print(e.getMessage());
				}
				if (!whetherReject_tPostgresqlRow_1) {
				}

				tos_count_tPostgresqlRow_1++;

				/**
				 * [tPostgresqlRow_1 main ] stop
				 */
				/**
				 * [tPostgresqlRow_1 end ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				stmt_tPostgresqlRow_1.close();

				ok_Hash.put("tPostgresqlRow_1", true);
				end_Hash.put("tPostgresqlRow_1", System.currentTimeMillis());

				/**
				 * [tPostgresqlRow_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tPostgresqlRow_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tWarn_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlRow_1 finally ] start
				 */

				currentComponent = "tPostgresqlRow_1";

				/**
				 * [tPostgresqlRow_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlRow_1_SUBPROCESS_STATE", 1);
	}

	public void tWarn_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_1 begin ] start
				 */

				ok_Hash.put("tWarn_1", false);
				start_Hash.put("tWarn_1", System.currentTimeMillis());

				currentComponent = "tWarn_1";

				int tos_count_tWarn_1 = 0;

				/**
				 * [tWarn_1 begin ] stop
				 */
				/**
				 * [tWarn_1 main ] start
				 */

				currentComponent = "tWarn_1";

				resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread
						.currentThread().getId() + "", "WARN", "",
						"Alimentation depuis la base " + context.app_db_bdd
								+ " terminée", "", "");
				tLogCatcher_1.addMessage("tWarn", "tWarn_1", 4,
						"Alimentation depuis la base " + context.app_db_bdd
								+ " terminée", 2);
				tLogCatcher_1Process(globalMap);
				globalMap.put("tWarn_1_WARN_MESSAGES",
						"Alimentation depuis la base " + context.app_db_bdd
								+ " terminée");
				globalMap.put("tWarn_1_WARN_PRIORITY", 4);
				globalMap.put("tWarn_1_WARN_CODE", 2);

				tos_count_tWarn_1++;

				/**
				 * [tWarn_1 main ] stop
				 */
				/**
				 * [tWarn_1 end ] start
				 */

				currentComponent = "tWarn_1";

				ok_Hash.put("tWarn_1", true);
				end_Hash.put("tWarn_1", System.currentTimeMillis());

				/**
				 * [tWarn_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT",
						"CONNECTION:SUBJOB_OK:tWarn_1:OnSubjobOk", "", Thread
								.currentThread().getId() + "", "", "", "", "",
						"");
			}

			tPostgresqlCommit_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_1 finally ] start
				 */

				currentComponent = "tWarn_1";

				/**
				 * [tWarn_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_2", false);
				start_Hash.put("tPostgresqlCommit_2",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlCommit_2";

				int tos_count_tPostgresqlCommit_2 = 0;

				/**
				 * [tPostgresqlCommit_2 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_2 main ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				java.sql.Connection conn_tPostgresqlCommit_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");
				if (conn_tPostgresqlCommit_2 != null
						&& !conn_tPostgresqlCommit_2.isClosed()) {
					try {
						conn_tPostgresqlCommit_2.commit();
					} finally {
						conn_tPostgresqlCommit_2.close();
					}
				}

				tos_count_tPostgresqlCommit_2++;

				/**
				 * [tPostgresqlCommit_2 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_2 end ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				ok_Hash.put("tPostgresqlCommit_2", true);
				end_Hash.put("tPostgresqlCommit_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_2 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_2";

				/**
				 * [tPostgresqlCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tWarn_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tWarn_2 begin ] start
				 */

				ok_Hash.put("tWarn_2", false);
				start_Hash.put("tWarn_2", System.currentTimeMillis());

				currentComponent = "tWarn_2";

				int tos_count_tWarn_2 = 0;

				/**
				 * [tWarn_2 begin ] stop
				 */
				/**
				 * [tWarn_2 main ] start
				 */

				currentComponent = "tWarn_2";

				resumeUtil
						.addLog("USER_DEF_LOG",
								"NODE:tWarn_2",
								"",
								Thread.currentThread().getId() + "",
								"WARN",
								"",
								" ************ Erreur de connexion de la base source "
										+ context.app_db_bdd
										+ " du serveur "
										+ context.app_db_host
										+ " - Veuillez vérifier les paramètres!!  ************ ",
								"", "");
				tLogCatcher_1
						.addMessage(
								"tWarn",
								"tWarn_2",
								4,
								" ************ Erreur de connexion de la base source "
										+ context.app_db_bdd
										+ " du serveur "
										+ context.app_db_host
										+ " - Veuillez vérifier les paramètres!!  ************ ",
								998);
				tLogCatcher_1Process(globalMap);
				globalMap
						.put("tWarn_2_WARN_MESSAGES",
								" ************ Erreur de connexion de la base source "
										+ context.app_db_bdd
										+ " du serveur "
										+ context.app_db_host
										+ " - Veuillez vérifier les paramètres!!  ************ ");
				globalMap.put("tWarn_2_WARN_PRIORITY", 4);
				globalMap.put("tWarn_2_WARN_CODE", 998);

				tos_count_tWarn_2++;

				/**
				 * [tWarn_2 main ] stop
				 */
				/**
				 * [tWarn_2 end ] start
				 */

				currentComponent = "tWarn_2";

				ok_Hash.put("tWarn_2", true);
				end_Hash.put("tWarn_2", System.currentTimeMillis());

				/**
				 * [tWarn_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tWarn_2 finally ] start
				 */

				currentComponent = "tWarn_2";

				/**
				 * [tWarn_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements
			routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int id_agc;

		public int getId_agc() {
			return this.id_agc;
		}

		public String compte_liaison;

		public String getCompte_liaison() {
			return this.compte_liaison;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.id_agc;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id_agc != other.id_agc)
				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id_agc = this.id_agc;
			other.compte_liaison = this.compte_liaison;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id_agc = this.id_agc;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos,
				ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.id_agc = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.id_agc);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.compte_liaison = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.compte_liaison, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id_agc=" + String.valueOf(id_agc));
			sb.append(",compte_liaison=" + compte_liaison);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id_agc, other.id_agc);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tPostgresqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tHash_row1 begin ] start
				 */

				ok_Hash.put("tHash_row1", false);
				start_Hash.put("tHash_row1", System.currentTimeMillis());

				currentComponent = "tHash_row1";

				int tos_count_tHash_row1 = 0;

				java.util.Map<row1Struct, row1Struct> tHash_row1 = new java.util.LinkedHashMap<row1Struct, row1Struct>();
				globalMap.put("tHash_row1", tHash_row1);

				/**
				 * [tHash_row1 begin ] stop
				 */

				/**
				 * [tPostgresqlInput_2 begin ] start
				 */

				ok_Hash.put("tPostgresqlInput_2", false);
				start_Hash
						.put("tPostgresqlInput_2", System.currentTimeMillis());

				currentComponent = "tPostgresqlInput_2";

				int tos_count_tPostgresqlInput_2 = 0;

				int nb_line_tPostgresqlInput_2 = 0;
				java.sql.Connection conn_tPostgresqlInput_2 = null;
				conn_tPostgresqlInput_2 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				java.sql.Statement stmt_tPostgresqlInput_2 = conn_tPostgresqlInput_2
						.createStatement();

				String dbquery_tPostgresqlInput_2 = "select id_agc,compte_liaison from adsys_multi_agence";

				globalMap.put("tPostgresqlInput_2_QUERY",
						dbquery_tPostgresqlInput_2);
				java.sql.ResultSet rs_tPostgresqlInput_2 = null;
				try {
					rs_tPostgresqlInput_2 = stmt_tPostgresqlInput_2
							.executeQuery(dbquery_tPostgresqlInput_2);
					java.sql.ResultSetMetaData rsmd_tPostgresqlInput_2 = rs_tPostgresqlInput_2
							.getMetaData();
					int colQtyInRs_tPostgresqlInput_2 = rsmd_tPostgresqlInput_2
							.getColumnCount();

					String tmpContent_tPostgresqlInput_2 = null;

					while (rs_tPostgresqlInput_2.next()) {
						nb_line_tPostgresqlInput_2++;

						if (colQtyInRs_tPostgresqlInput_2 < 1) {
							row1.id_agc = 0;
						} else {

							if (rs_tPostgresqlInput_2.getObject(1) != null) {
								row1.id_agc = rs_tPostgresqlInput_2.getInt(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tPostgresqlInput_2 < 2) {
							row1.compte_liaison = null;
						} else {

							tmpContent_tPostgresqlInput_2 = rs_tPostgresqlInput_2
									.getString(2);
							if (tmpContent_tPostgresqlInput_2 != null) {
								row1.compte_liaison = tmpContent_tPostgresqlInput_2;
							} else {
								row1.compte_liaison = null;
							}
						}

						/**
						 * [tPostgresqlInput_2 begin ] stop
						 */
						/**
						 * [tPostgresqlInput_2 main ] start
						 */

						currentComponent = "tPostgresqlInput_2";

						tos_count_tPostgresqlInput_2++;

						/**
						 * [tPostgresqlInput_2 main ] stop
						 */

						/**
						 * [tHash_row1 main ] start
						 */

						currentComponent = "tHash_row1";

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.id_agc = row1.id_agc;
						row1_HashRow.compte_liaison = row1.compte_liaison;
						tHash_row1.put(row1_HashRow, row1_HashRow);

						tos_count_tHash_row1++;

						/**
						 * [tHash_row1 main ] stop
						 */

						/**
						 * [tPostgresqlInput_2 end ] start
						 */

						currentComponent = "tPostgresqlInput_2";

					}
				} finally {
					stmt_tPostgresqlInput_2.close();

				}
				globalMap.put("tPostgresqlInput_2_NB_LINE",
						nb_line_tPostgresqlInput_2);

				ok_Hash.put("tPostgresqlInput_2", true);
				end_Hash.put("tPostgresqlInput_2", System.currentTimeMillis());

				/**
				 * [tPostgresqlInput_2 end ] stop
				 */

				/**
				 * [tHash_row1 end ] start
				 */

				currentComponent = "tHash_row1";

				ok_Hash.put("tHash_row1", true);
				end_Hash.put("tHash_row1", System.currentTimeMillis());

				/**
				 * [tHash_row1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlInput_2 finally ] start
				 */

				currentComponent = "tPostgresqlInput_2";

				/**
				 * [tPostgresqlInput_2 finally ] stop
				 */

				/**
				 * [tHash_row1 finally ] start
				 */

				currentComponent = "tHash_row1";

				/**
				 * [tHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlInput_2_SUBPROCESS_STATE", 1);
	}

	public static class messageStruct implements
			routines.system.IPersistableRow<messageStruct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public String nom_projet;

		public String getNom_projet() {
			return this.nom_projet;
		}

		public String nom_job;

		public String getNom_job() {
			return this.nom_job;
		}

		public String nom_composant;

		public String getNom_composant() {
			return this.nom_composant;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer id_log;

		public Integer getId_log() {
			return this.id_log;
		}

		public String nom_agence;

		public String getNom_agence() {
			return this.nom_agence;
		}

		public Boolean status;

		public Boolean getStatus() {
			return this.status;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.date = readDate(dis);

					this.nom_projet = readString(dis);

					this.nom_job = readString(dis);

					this.nom_composant = readString(dis);

					this.message = readString(dis);

					this.id_log = readInteger(dis);

					this.nom_agence = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.status = null;
					} else {
						this.status = dis.readBoolean();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

				// String

				writeString(this.nom_projet, dos);

				// String

				writeString(this.nom_job, dos);

				// String

				writeString(this.nom_composant, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.id_log, dos);

				// String

				writeString(this.nom_agence, dos);

				// Boolean

				if (this.status == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.status);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("date=" + String.valueOf(date));
			sb.append(",nom_projet=" + nom_projet);
			sb.append(",nom_job=" + nom_job);
			sb.append(",nom_composant=" + nom_composant);
			sb.append(",message=" + message);
			sb.append(",id_log=" + String.valueOf(id_log));
			sb.append(",nom_agence=" + nom_agence);
			sb.append(",status=" + String.valueOf(status));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(messageStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];
		static byte[] commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length) {
					if (length < 1024
							&& commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE.length == 0) {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[1024];
					} else {
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length);
				strReturn = new String(
						commonByteArray_ALIM_SIEGE_RECUP_DATA_AGENCE, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ALIM_SIEGE_RECUP_DATA_AGENCE) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();
				messageStruct message = new messageStruct();

				/**
				 * [tPostgresqlOutput_3 begin ] start
				 */

				ok_Hash.put("tPostgresqlOutput_3", false);
				start_Hash.put("tPostgresqlOutput_3",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlOutput_3";

				int tos_count_tPostgresqlOutput_3 = 0;

				String dbschema_tPostgresqlOutput_3 = null;
				dbschema_tPostgresqlOutput_3 = (String) globalMap.get("schema_"
						+ "tPostgresqlConnection_2");

				String tableName_tPostgresqlOutput_3 = null;
				if (dbschema_tPostgresqlOutput_3 == null
						|| dbschema_tPostgresqlOutput_3.trim().length() == 0) {
					tableName_tPostgresqlOutput_3 = "log_multiagence_details";
				} else {
					tableName_tPostgresqlOutput_3 = dbschema_tPostgresqlOutput_3
							+ "\".\"" + "log_multiagence_details";
				}

				int nb_line_tPostgresqlOutput_3 = 0;
				int nb_line_update_tPostgresqlOutput_3 = 0;
				int nb_line_inserted_tPostgresqlOutput_3 = 0;
				int nb_line_deleted_tPostgresqlOutput_3 = 0;
				int nb_line_rejected_tPostgresqlOutput_3 = 0;

				int deletedCount_tPostgresqlOutput_3 = 0;
				int updatedCount_tPostgresqlOutput_3 = 0;
				int insertedCount_tPostgresqlOutput_3 = 0;
				int rejectedCount_tPostgresqlOutput_3 = 0;

				boolean whetherReject_tPostgresqlOutput_3 = false;

				java.sql.Connection conn_tPostgresqlOutput_3 = null;

				conn_tPostgresqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");

				int count_tPostgresqlOutput_3 = 0;
				String insert_tPostgresqlOutput_3 = "INSERT INTO \""
						+ tableName_tPostgresqlOutput_3
						+ "\" (\"date\",\"nom_projet\",\"nom_job\",\"nom_composant\",\"message\",\"id_log\",\"nom_agence\",\"status\") VALUES (?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tPostgresqlOutput_3 = conn_tPostgresqlOutput_3
						.prepareStatement(insert_tPostgresqlOutput_3);

				/**
				 * [tPostgresqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				messageStruct message_tmp = new messageStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row5.type = lcm.getType();
					row5.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row5.priority = lcm.getPriority();
					row5.message = lcm.getMessage();
					row5.code = lcm.getCode();

					row5.moment = java.util.Calendar.getInstance().getTime();

					row5.pid = pid;
					row5.root_pid = rootPid;
					row5.father_pid = fatherPid;

					row5.project = projectName;
					row5.job = jobName;
					row5.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */
					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						message = null;

						// # Output table : 'message'
						message_tmp.date = TalendDate.parseDate(
								"yyyy-MM-dd HH:mm:ss", TalendDate.formatDate(
										"yyyy-MM-dd HH:mm:ss", row5.moment));
						message_tmp.nom_projet = row5.project;
						message_tmp.nom_job = row5.job;
						message_tmp.nom_composant = (new Integer(
								row5.origin == "tPostgresqlConnection_1" ? 999
										: row5.code)).toString();
						message_tmp.message = row5.message;
						message_tmp.id_log = context.id_log_parent;
						message_tmp.nom_agence = context.desc_agence;
						message_tmp.status = row5.origin == "tWarn_2"
								|| row5.origin == "tPostgresqlConnection_1" ? false
								: true;
						message = message_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "message"
					if (message != null) {

						/**
						 * [tPostgresqlOutput_3 main ] start
						 */

						currentComponent = "tPostgresqlOutput_3";

						whetherReject_tPostgresqlOutput_3 = false;
						if (message.date != null) {
							pstmt_tPostgresqlOutput_3.setTimestamp(
									1,
									new java.sql.Timestamp(message.date
											.getTime()));
						} else {
							pstmt_tPostgresqlOutput_3.setNull(1,
									java.sql.Types.TIMESTAMP);
						}

						if (message.nom_projet == null) {
							pstmt_tPostgresqlOutput_3.setNull(2,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_3.setString(2,
									message.nom_projet);
						}

						if (message.nom_job == null) {
							pstmt_tPostgresqlOutput_3.setNull(3,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_3.setString(3,
									message.nom_job);
						}

						if (message.nom_composant == null) {
							pstmt_tPostgresqlOutput_3.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_3.setString(4,
									message.nom_composant);
						}

						if (message.message == null) {
							pstmt_tPostgresqlOutput_3.setNull(5,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_3.setString(5,
									message.message);
						}

						if (message.id_log == null) {
							pstmt_tPostgresqlOutput_3.setNull(6,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tPostgresqlOutput_3.setInt(6, message.id_log);
						}

						if (message.nom_agence == null) {
							pstmt_tPostgresqlOutput_3.setNull(7,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tPostgresqlOutput_3.setString(7,
									message.nom_agence);
						}

						if (message.status == null) {
							pstmt_tPostgresqlOutput_3.setNull(8,
									java.sql.Types.BOOLEAN);
						} else {
							pstmt_tPostgresqlOutput_3.setBoolean(8,
									message.status);
						}

						try {
							nb_line_tPostgresqlOutput_3++;

							insertedCount_tPostgresqlOutput_3 = insertedCount_tPostgresqlOutput_3
									+ pstmt_tPostgresqlOutput_3.executeUpdate();

						} catch (java.lang.Exception e) {

							whetherReject_tPostgresqlOutput_3 = true;
							System.err.print(e.getMessage());
						}
						if (!whetherReject_tPostgresqlOutput_3) {
						}

						tos_count_tPostgresqlOutput_3++;

						/**
						 * [tPostgresqlOutput_3 main ] stop
						 */

					} // End of branch "message"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 end ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				if (pstmt_tPostgresqlOutput_3 != null) {

					pstmt_tPostgresqlOutput_3.close();

				}

				nb_line_deleted_tPostgresqlOutput_3 = nb_line_deleted_tPostgresqlOutput_3
						+ deletedCount_tPostgresqlOutput_3;
				nb_line_update_tPostgresqlOutput_3 = nb_line_update_tPostgresqlOutput_3
						+ updatedCount_tPostgresqlOutput_3;
				nb_line_inserted_tPostgresqlOutput_3 = nb_line_inserted_tPostgresqlOutput_3
						+ insertedCount_tPostgresqlOutput_3;
				nb_line_rejected_tPostgresqlOutput_3 = nb_line_rejected_tPostgresqlOutput_3
						+ rejectedCount_tPostgresqlOutput_3;
				globalMap.put("tPostgresqlOutput_3_NB_LINE",
						nb_line_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tPostgresqlOutput_3);
				globalMap.put("tPostgresqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tPostgresqlOutput_3);

				ok_Hash.put("tPostgresqlOutput_3", true);
				end_Hash.put("tPostgresqlOutput_3", System.currentTimeMillis());

				tPostgresqlCommit_4Process(globalMap);

				/**
				 * [tPostgresqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tPostgresqlOutput_3 finally ] start
				 */

				currentComponent = "tPostgresqlOutput_3";

				/**
				 * [tPostgresqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tPostgresqlCommit_4Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tPostgresqlCommit_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		int iterateLoop = 0;
		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tPostgresqlCommit_4 begin ] start
				 */

				ok_Hash.put("tPostgresqlCommit_4", false);
				start_Hash.put("tPostgresqlCommit_4",
						System.currentTimeMillis());

				currentComponent = "tPostgresqlCommit_4";

				int tos_count_tPostgresqlCommit_4 = 0;

				/**
				 * [tPostgresqlCommit_4 begin ] stop
				 */
				/**
				 * [tPostgresqlCommit_4 main ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				java.sql.Connection conn_tPostgresqlCommit_4 = (java.sql.Connection) globalMap
						.get("conn_tPostgresqlConnection_2");
				if (conn_tPostgresqlCommit_4 != null
						&& !conn_tPostgresqlCommit_4.isClosed()) {
					conn_tPostgresqlCommit_4.commit();
				}

				tos_count_tPostgresqlCommit_4++;

				/**
				 * [tPostgresqlCommit_4 main ] stop
				 */
				/**
				 * [tPostgresqlCommit_4 end ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				ok_Hash.put("tPostgresqlCommit_4", true);
				end_Hash.put("tPostgresqlCommit_4", System.currentTimeMillis());

				/**
				 * [tPostgresqlCommit_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tPostgresqlCommit_4 finally ] start
				 */

				currentComponent = "tPostgresqlCommit_4";

				/**
				 * [tPostgresqlCommit_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostgresqlCommit_4_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final RECUP_DATA_AGENCE RECUP_DATA_AGENCEClass = new RECUP_DATA_AGENCE();

		int exitCode = RECUP_DATA_AGENCEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = RECUP_DATA_AGENCE.class
					.getClassLoader().getResourceAsStream(
							"alim_siege/recup_data_agence_0_3/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.app_db_bdd = (String) context.getProperty("app_db_bdd");
			context.app_db_host = (String) context.getProperty("app_db_host");
			context.app_db_login = (String) context.getProperty("app_db_login");
			context.app_db_port = (String) context.getProperty("app_db_port");
			context.app_db_pwd = (String) context.getProperty("app_db_pwd");
			context.app_db_schema = (String) context
					.getProperty("app_db_schema");
			try {
				context.DB_port = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("DB_port"));
			} catch (NumberFormatException e) {
				context.DB_port = null;
			}
			context.DB_name = (String) context.getProperty("DB_name");
			context.DB_user = (String) context.getProperty("DB_user");
			context.DB_pass = (String) context.getProperty("DB_pass");
			context.DB_host = (String) context.getProperty("DB_host");
			context.DB_schema = (String) context.getProperty("DB_schema");
			try {
				context.max_audit_id = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("max_audit_id"));
			} catch (NumberFormatException e) {
				context.max_audit_id = null;
			}
			try {
				context.id_agence = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("id_agence"));
			} catch (NumberFormatException e) {
				context.id_agence = null;
			}
			context.desc_agence = (String) context.getProperty("desc_agence");
			try {
				context.id_log_parent = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("id_log_parent"));
			} catch (NumberFormatException e) {
				context.id_log_parent = null;
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("app_db_bdd")) {
				context.app_db_bdd = (String) parentContextMap
						.get("app_db_bdd");
			}
			if (parentContextMap.containsKey("app_db_host")) {
				context.app_db_host = (String) parentContextMap
						.get("app_db_host");
			}
			if (parentContextMap.containsKey("app_db_login")) {
				context.app_db_login = (String) parentContextMap
						.get("app_db_login");
			}
			if (parentContextMap.containsKey("app_db_port")) {
				context.app_db_port = (String) parentContextMap
						.get("app_db_port");
			}
			if (parentContextMap.containsKey("app_db_pwd")) {
				context.app_db_pwd = (String) parentContextMap
						.get("app_db_pwd");
			}
			if (parentContextMap.containsKey("app_db_schema")) {
				context.app_db_schema = (String) parentContextMap
						.get("app_db_schema");
			}
			if (parentContextMap.containsKey("DB_port")) {
				context.DB_port = (Integer) parentContextMap.get("DB_port");
			}
			if (parentContextMap.containsKey("DB_name")) {
				context.DB_name = (String) parentContextMap.get("DB_name");
			}
			if (parentContextMap.containsKey("DB_user")) {
				context.DB_user = (String) parentContextMap.get("DB_user");
			}
			if (parentContextMap.containsKey("DB_pass")) {
				context.DB_pass = (String) parentContextMap.get("DB_pass");
			}
			if (parentContextMap.containsKey("DB_host")) {
				context.DB_host = (String) parentContextMap.get("DB_host");
			}
			if (parentContextMap.containsKey("DB_schema")) {
				context.DB_schema = (String) parentContextMap.get("DB_schema");
			}
			if (parentContextMap.containsKey("max_audit_id")) {
				context.max_audit_id = (Integer) parentContextMap
						.get("max_audit_id");
			}
			if (parentContextMap.containsKey("id_agence")) {
				context.id_agence = (Integer) parentContextMap.get("id_agence");
			}
			if (parentContextMap.containsKey("desc_agence")) {
				context.desc_agence = (String) parentContextMap
						.get("desc_agence");
			}
			if (parentContextMap.containsKey("id_log_parent")) {
				context.id_log_parent = (Integer) parentContextMap
						.get("id_log_parent");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tPostgresqlConnection_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostgresqlConnection_2) {
			globalMap.put("tPostgresqlConnection_2_SUBPROCESS_STATE", -1);

			e_tPostgresqlConnection_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory)
							+ " bytes memory increase when running : RECUP_DATA_AGENCE");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 150831 characters generated by Talend Open Studio for Data Integration on the
 * February 19, 2019 2:59:57 PM MUT
 ************************************************************************************************/
